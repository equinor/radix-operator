// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/internal/watcher/namespace.go

// Package watcher is a generated GoMock package.
package watcher

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockNamespaceWatcher is a mock of NamespaceWatcher interface.
type MockNamespaceWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceWatcherMockRecorder
}

// MockNamespaceWatcherMockRecorder is the mock recorder for MockNamespaceWatcher.
type MockNamespaceWatcherMockRecorder struct {
	mock *MockNamespaceWatcher
}

// NewMockNamespaceWatcher creates a new mock instance.
func NewMockNamespaceWatcher(ctrl *gomock.Controller) *MockNamespaceWatcher {
	mock := &MockNamespaceWatcher{ctrl: ctrl}
	mock.recorder = &MockNamespaceWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNamespaceWatcher) EXPECT() *MockNamespaceWatcherMockRecorder {
	return m.recorder
}

// WaitFor mocks base method.
func (m *MockNamespaceWatcher) WaitFor(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitFor", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitFor indicates an expected call of WaitFor.
func (mr *MockNamespaceWatcherMockRecorder) WaitFor(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitFor", reflect.TypeOf((*MockNamespaceWatcher)(nil).WaitFor), ctx, namespace)
}
