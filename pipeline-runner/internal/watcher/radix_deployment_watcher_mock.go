// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/internal/watcher/radix_deployment_watcher.go

// Package watcher is a generated GoMock package.
package watcher

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRadixDeploymentWatcher is a mock of RadixDeploymentWatcher interface.
type MockRadixDeploymentWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockRadixDeploymentWatcherMockRecorder
}

// MockRadixDeploymentWatcherMockRecorder is the mock recorder for MockRadixDeploymentWatcher.
type MockRadixDeploymentWatcherMockRecorder struct {
	mock *MockRadixDeploymentWatcher
}

// NewMockRadixDeploymentWatcher creates a new mock instance.
func NewMockRadixDeploymentWatcher(ctrl *gomock.Controller) *MockRadixDeploymentWatcher {
	mock := &MockRadixDeploymentWatcher{ctrl: ctrl}
	mock.recorder = &MockRadixDeploymentWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadixDeploymentWatcher) EXPECT() *MockRadixDeploymentWatcherMockRecorder {
	return m.recorder
}

// WaitForActive mocks base method.
func (m *MockRadixDeploymentWatcher) WaitForActive(namespace, deploymentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForActive", namespace, deploymentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitForActive indicates an expected call of WaitForActive.
func (mr *MockRadixDeploymentWatcherMockRecorder) WaitForActive(namespace, deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForActive", reflect.TypeOf((*MockRadixDeploymentWatcher)(nil).WaitForActive), namespace, deploymentName)
}
