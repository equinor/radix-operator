// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/internal/jobs/build/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/equinor/radix-operator/pipeline-runner/model"
	pipeline "github.com/equinor/radix-operator/pkg/apis/pipeline"
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
	v10 "k8s.io/api/batch/v1"
)

// MockJobsBuilder is a mock of JobsBuilder interface.
type MockJobsBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockJobsBuilderMockRecorder
}

// MockJobsBuilderMockRecorder is the mock recorder for MockJobsBuilder.
type MockJobsBuilderMockRecorder struct {
	mock *MockJobsBuilder
}

// NewMockJobsBuilder creates a new mock instance.
func NewMockJobsBuilder(ctrl *gomock.Controller) *MockJobsBuilder {
	mock := &MockJobsBuilder{ctrl: ctrl}
	mock.recorder = &MockJobsBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobsBuilder) EXPECT() *MockJobsBuilderMockRecorder {
	return m.recorder
}

// BuildJobs mocks base method.
func (m *MockJobsBuilder) BuildJobs(useBuildCache, refreshBuildCache bool, pipelineArgs model.PipelineArguments, cloneURL, gitCommitHash, gitTags string, componentImages []pipeline.BuildComponentImage, buildSecrets []string, appID v1.ULID, imagePullSecrets string) []v10.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildJobs", useBuildCache, refreshBuildCache, pipelineArgs, cloneURL, gitCommitHash, gitTags, componentImages, buildSecrets, appID, imagePullSecrets)
	ret0, _ := ret[0].([]v10.Job)
	return ret0
}

// BuildJobs indicates an expected call of BuildJobs.
func (mr *MockJobsBuilderMockRecorder) BuildJobs(useBuildCache, refreshBuildCache, pipelineArgs, cloneURL, gitCommitHash, gitTags, componentImages, buildSecrets, appID, imagePullSecrets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildJobs", reflect.TypeOf((*MockJobsBuilder)(nil).BuildJobs), useBuildCache, refreshBuildCache, pipelineArgs, cloneURL, gitCommitHash, gitTags, componentImages, buildSecrets, appID, imagePullSecrets)
}
