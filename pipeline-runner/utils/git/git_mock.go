// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/utils/git/git.go

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CheckoutBranch mocks base method.
func (m *MockRepository) CheckoutBranch(branch string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutBranch", branch)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutBranch indicates an expected call of CheckoutBranch.
func (mr *MockRepositoryMockRecorder) CheckoutBranch(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutBranch", reflect.TypeOf((*MockRepository)(nil).CheckoutBranch), branch)
}

// CheckoutCommit mocks base method.
func (m *MockRepository) CheckoutCommit(commit string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckoutCommit", commit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckoutCommit indicates an expected call of CheckoutCommit.
func (mr *MockRepositoryMockRecorder) CheckoutCommit(commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckoutCommit", reflect.TypeOf((*MockRepository)(nil).CheckoutCommit), commit)
}

// GetLatestCommitForBranch mocks base method.
func (m *MockRepository) GetLatestCommitForBranch(branch string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestCommitForBranch", branch)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestCommitForBranch indicates an expected call of GetLatestCommitForBranch.
func (mr *MockRepositoryMockRecorder) GetLatestCommitForBranch(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestCommitForBranch", reflect.TypeOf((*MockRepository)(nil).GetLatestCommitForBranch), branch)
}

// IsAncestor mocks base method.
func (m *MockRepository) IsAncestor(ancestor, other string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAncestor", ancestor, other)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAncestor indicates an expected call of IsAncestor.
func (mr *MockRepositoryMockRecorder) IsAncestor(ancestor, other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAncestor", reflect.TypeOf((*MockRepository)(nil).IsAncestor), ancestor, other)
}

// ResolveTagsForCommit mocks base method.
func (m *MockRepository) ResolveTagsForCommit(commit string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveTagsForCommit", commit)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveTagsForCommit indicates an expected call of ResolveTagsForCommit.
func (mr *MockRepositoryMockRecorder) ResolveTagsForCommit(commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTagsForCommit", reflect.TypeOf((*MockRepository)(nil).ResolveTagsForCommit), commit)
}
