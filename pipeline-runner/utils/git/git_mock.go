// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/utils/git/git.go

// Package git is a generated GoMock package.
package git

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Checkout mocks base method.
func (m *MockRepository) Checkout(reference string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checkout", reference)
	ret0, _ := ret[0].(error)
	return ret0
}

// Checkout indicates an expected call of Checkout.
func (mr *MockRepositoryMockRecorder) Checkout(reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checkout", reflect.TypeOf((*MockRepository)(nil).Checkout), reference)
}

// DiffCommits mocks base method.
func (m *MockRepository) DiffCommits(beforeCommitHash, afterCommitHash string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiffCommits", beforeCommitHash, afterCommitHash)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DiffCommits indicates an expected call of DiffCommits.
func (mr *MockRepositoryMockRecorder) DiffCommits(beforeCommitHash, afterCommitHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiffCommits", reflect.TypeOf((*MockRepository)(nil).DiffCommits), beforeCommitHash, afterCommitHash)
}

// GetCommitForReference mocks base method.
func (m *MockRepository) GetCommitForReference(reference string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitForReference", reference)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitForReference indicates an expected call of GetCommitForReference.
func (mr *MockRepositoryMockRecorder) GetCommitForReference(reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitForReference", reflect.TypeOf((*MockRepository)(nil).GetCommitForReference), reference)
}

// IsAncestor mocks base method.
func (m *MockRepository) IsAncestor(ancestor, other string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAncestor", ancestor, other)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAncestor indicates an expected call of IsAncestor.
func (mr *MockRepositoryMockRecorder) IsAncestor(ancestor, other interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAncestor", reflect.TypeOf((*MockRepository)(nil).IsAncestor), ancestor, other)
}

// ResolveTagsForCommit mocks base method.
func (m *MockRepository) ResolveTagsForCommit(commitHash string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveTagsForCommit", commitHash)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveTagsForCommit indicates an expected call of ResolveTagsForCommit.
func (mr *MockRepositoryMockRecorder) ResolveTagsForCommit(commitHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveTagsForCommit", reflect.TypeOf((*MockRepository)(nil).ResolveTagsForCommit), commitHash)
}
