// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/steps/preparepipeline/internal/context_builder.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	model "github.com/equinor/radix-operator/pipeline-runner/model"
	git "github.com/equinor/radix-operator/pipeline-runner/utils/git"
	gomock "github.com/golang/mock/gomock"
)

// MockContextBuilder is a mock of ContextBuilder interface.
type MockContextBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockContextBuilderMockRecorder
}

// MockContextBuilderMockRecorder is the mock recorder for MockContextBuilder.
type MockContextBuilderMockRecorder struct {
	mock *MockContextBuilder
}

// NewMockContextBuilder creates a new mock instance.
func NewMockContextBuilder(ctrl *gomock.Controller) *MockContextBuilder {
	mock := &MockContextBuilder{ctrl: ctrl}
	mock.recorder = &MockContextBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContextBuilder) EXPECT() *MockContextBuilderMockRecorder {
	return m.recorder
}

// GetBuildContext mocks base method.
func (m *MockContextBuilder) GetBuildContext(pipelineInfo *model.PipelineInfo, repo git.Repository) (*model.BuildContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildContext", pipelineInfo, repo)
	ret0, _ := ret[0].(*model.BuildContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildContext indicates an expected call of GetBuildContext.
func (mr *MockContextBuilderMockRecorder) GetBuildContext(pipelineInfo, repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildContext", reflect.TypeOf((*MockContextBuilder)(nil).GetBuildContext), pipelineInfo, repo)
}
