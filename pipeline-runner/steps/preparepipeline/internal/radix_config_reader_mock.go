// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/steps/preparepipeline/internal/radix_config_reader.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	model "github.com/equinor/radix-operator/pipeline-runner/model"
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockRadixConfigReader is a mock of RadixConfigReader interface.
type MockRadixConfigReader struct {
	ctrl     *gomock.Controller
	recorder *MockRadixConfigReaderMockRecorder
}

// MockRadixConfigReaderMockRecorder is the mock recorder for MockRadixConfigReader.
type MockRadixConfigReaderMockRecorder struct {
	mock *MockRadixConfigReader
}

// NewMockRadixConfigReader creates a new mock instance.
func NewMockRadixConfigReader(ctrl *gomock.Controller) *MockRadixConfigReader {
	mock := &MockRadixConfigReader{ctrl: ctrl}
	mock.recorder = &MockRadixConfigReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadixConfigReader) EXPECT() *MockRadixConfigReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockRadixConfigReader) Read(pipelineInfo *model.PipelineInfo) (*v1.RadixApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", pipelineInfo)
	ret0, _ := ret[0].(*v1.RadixApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRadixConfigReaderMockRecorder) Read(pipelineInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRadixConfigReader)(nil).Read), pipelineInfo)
}
