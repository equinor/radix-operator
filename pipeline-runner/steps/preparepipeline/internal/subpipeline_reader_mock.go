// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/steps/preparepipeline/internal/subpipeline_reader.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	model "github.com/equinor/radix-operator/pipeline-runner/model"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1"
)

// MockSubPipelineReader is a mock of SubPipelineReader interface.
type MockSubPipelineReader struct {
	ctrl     *gomock.Controller
	recorder *MockSubPipelineReaderMockRecorder
}

// MockSubPipelineReaderMockRecorder is the mock recorder for MockSubPipelineReader.
type MockSubPipelineReaderMockRecorder struct {
	mock *MockSubPipelineReader
}

// NewMockSubPipelineReader creates a new mock instance.
func NewMockSubPipelineReader(ctrl *gomock.Controller) *MockSubPipelineReader {
	mock := &MockSubPipelineReader{ctrl: ctrl}
	mock.recorder = &MockSubPipelineReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubPipelineReader) EXPECT() *MockSubPipelineReaderMockRecorder {
	return m.recorder
}

// ReadPipelineAndTasks mocks base method.
func (m *MockSubPipelineReader) ReadPipelineAndTasks(pipelineInfo *model.PipelineInfo, envName string) (bool, string, *v1.Pipeline, []v1.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPipelineAndTasks", pipelineInfo, envName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*v1.Pipeline)
	ret2, _ := ret[2].([]v1.Task)
	ret3, _ := ret[3].(error)
	return false, ret0, ret1, ret2, ret3
}

// ReadPipelineAndTasks indicates an expected call of ReadPipelineAndTasks.
func (mr *MockSubPipelineReaderMockRecorder) ReadPipelineAndTasks(pipelineInfo, envName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPipelineAndTasks", reflect.TypeOf((*MockSubPipelineReader)(nil).ReadPipelineAndTasks), pipelineInfo, envName)
}
