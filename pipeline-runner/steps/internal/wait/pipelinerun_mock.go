// Code generated by MockGen. DO NOT EDIT.
// Source: ./pipeline-runner/steps/internal/wait/pipelinerun.go

// Package wait is a generated GoMock package.
package wait

import (
	reflect "reflect"

	model "github.com/equinor/radix-operator/pipeline-runner/model"
	gomock "github.com/golang/mock/gomock"
	v1 "github.com/tektoncd/pipeline/pkg/apis/pipeline/v1"
)

// MockPipelineRunsCompletionWaiter is a mock of PipelineRunsCompletionWaiter interface.
type MockPipelineRunsCompletionWaiter struct {
	ctrl     *gomock.Controller
	recorder *MockPipelineRunsCompletionWaiterMockRecorder
}

// MockPipelineRunsCompletionWaiterMockRecorder is the mock recorder for MockPipelineRunsCompletionWaiter.
type MockPipelineRunsCompletionWaiterMockRecorder struct {
	mock *MockPipelineRunsCompletionWaiter
}

// NewMockPipelineRunsCompletionWaiter creates a new mock instance.
func NewMockPipelineRunsCompletionWaiter(ctrl *gomock.Controller) *MockPipelineRunsCompletionWaiter {
	mock := &MockPipelineRunsCompletionWaiter{ctrl: ctrl}
	mock.recorder = &MockPipelineRunsCompletionWaiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipelineRunsCompletionWaiter) EXPECT() *MockPipelineRunsCompletionWaiterMockRecorder {
	return m.recorder
}

// Wait mocks base method.
func (m *MockPipelineRunsCompletionWaiter) Wait(pipelineRuns map[string]*v1.PipelineRun, pipelineInfo *model.PipelineInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", pipelineRuns, pipelineInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockPipelineRunsCompletionWaiterMockRecorder) Wait(pipelineRuns, pipelineInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockPipelineRunsCompletionWaiter)(nil).Wait), pipelineRuns, pipelineInfo)
}
