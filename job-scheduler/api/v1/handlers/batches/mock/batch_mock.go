// Code generated by MockGen. DO NOT EDIT.
// Source: ./job-scheduler/api/v1/handlers/batches/batch_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	common "github.com/equinor/radix-operator/job-scheduler/models/common"
	v1 "github.com/equinor/radix-operator/job-scheduler/models/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockBatchHandler is a mock of BatchHandler interface.
type MockBatchHandler struct {
	ctrl     *gomock.Controller
	recorder *MockBatchHandlerMockRecorder
}

// MockBatchHandlerMockRecorder is the mock recorder for MockBatchHandler.
type MockBatchHandlerMockRecorder struct {
	mock *MockBatchHandler
}

// NewMockBatchHandler creates a new mock instance.
func NewMockBatchHandler(ctrl *gomock.Controller) *MockBatchHandler {
	mock := &MockBatchHandler{ctrl: ctrl}
	mock.recorder = &MockBatchHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchHandler) EXPECT() *MockBatchHandlerMockRecorder {
	return m.recorder
}

// CopyBatch mocks base method.
func (m *MockBatchHandler) CopyBatch(ctx context.Context, batchName, deploymentName string) (*v1.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyBatch", ctx, batchName, deploymentName)
	ret0, _ := ret[0].(*v1.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyBatch indicates an expected call of CopyBatch.
func (mr *MockBatchHandlerMockRecorder) CopyBatch(ctx, batchName, deploymentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyBatch", reflect.TypeOf((*MockBatchHandler)(nil).CopyBatch), ctx, batchName, deploymentName)
}

// CreateBatch mocks base method.
func (m *MockBatchHandler) CreateBatch(ctx context.Context, batchScheduleDescription *common.BatchScheduleDescription) (*v1.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", ctx, batchScheduleDescription)
	ret0, _ := ret[0].(*v1.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockBatchHandlerMockRecorder) CreateBatch(ctx, batchScheduleDescription interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockBatchHandler)(nil).CreateBatch), ctx, batchScheduleDescription)
}

// DeleteBatch mocks base method.
func (m *MockBatchHandler) DeleteBatch(ctx context.Context, batchName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBatch", ctx, batchName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBatch indicates an expected call of DeleteBatch.
func (mr *MockBatchHandlerMockRecorder) DeleteBatch(ctx, batchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBatch", reflect.TypeOf((*MockBatchHandler)(nil).DeleteBatch), ctx, batchName)
}

// GetBatch mocks base method.
func (m *MockBatchHandler) GetBatch(ctx context.Context, batchName string) (*v1.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", ctx, batchName)
	ret0, _ := ret[0].(*v1.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch.
func (mr *MockBatchHandlerMockRecorder) GetBatch(ctx, batchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockBatchHandler)(nil).GetBatch), ctx, batchName)
}

// GetBatchJob mocks base method.
func (m *MockBatchHandler) GetBatchJob(ctx context.Context, batchName, jobName string) (*v1.JobStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchJob", ctx, batchName, jobName)
	ret0, _ := ret[0].(*v1.JobStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchJob indicates an expected call of GetBatchJob.
func (mr *MockBatchHandlerMockRecorder) GetBatchJob(ctx, batchName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchJob", reflect.TypeOf((*MockBatchHandler)(nil).GetBatchJob), ctx, batchName, jobName)
}

// GetBatches mocks base method.
func (m *MockBatchHandler) GetBatches(ctx context.Context) ([]v1.BatchStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatches", ctx)
	ret0, _ := ret[0].([]v1.BatchStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatches indicates an expected call of GetBatches.
func (mr *MockBatchHandlerMockRecorder) GetBatches(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatches", reflect.TypeOf((*MockBatchHandler)(nil).GetBatches), ctx)
}

// StopAllBatches mocks base method.
func (m *MockBatchHandler) StopAllBatches(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopAllBatches", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopAllBatches indicates an expected call of StopAllBatches.
func (mr *MockBatchHandlerMockRecorder) StopAllBatches(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAllBatches", reflect.TypeOf((*MockBatchHandler)(nil).StopAllBatches), ctx)
}

// StopBatch mocks base method.
func (m *MockBatchHandler) StopBatch(ctx context.Context, batchName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopBatch", ctx, batchName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopBatch indicates an expected call of StopBatch.
func (mr *MockBatchHandlerMockRecorder) StopBatch(ctx, batchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBatch", reflect.TypeOf((*MockBatchHandler)(nil).StopBatch), ctx, batchName)
}

// StopBatchJob mocks base method.
func (m *MockBatchHandler) StopBatchJob(ctx context.Context, batchName, jobName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopBatchJob", ctx, batchName, jobName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopBatchJob indicates an expected call of StopBatchJob.
func (mr *MockBatchHandlerMockRecorder) StopBatchJob(ctx, batchName, jobName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopBatchJob", reflect.TypeOf((*MockBatchHandler)(nil).StopBatchJob), ctx, batchName, jobName)
}
