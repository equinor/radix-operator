// Code generated by MockGen. DO NOT EDIT.
// Source: ./radix-operator/batch/internal/syncerfactory.go

// Package internal is a generated GoMock package.
package internal

import (
	reflect "reflect"

	batch "github.com/equinor/radix-operator/pkg/apis/batch"
	kube "github.com/equinor/radix-operator/pkg/apis/kube"
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	versioned "github.com/equinor/radix-operator/pkg/client/clientset/versioned"
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
)

// MockSyncerFactory is a mock of SyncerFactory interface.
type MockSyncerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSyncerFactoryMockRecorder
}

// MockSyncerFactoryMockRecorder is the mock recorder for MockSyncerFactory.
type MockSyncerFactoryMockRecorder struct {
	mock *MockSyncerFactory
}

// NewMockSyncerFactory creates a new mock instance.
func NewMockSyncerFactory(ctrl *gomock.Controller) *MockSyncerFactory {
	mock := &MockSyncerFactory{ctrl: ctrl}
	mock.recorder = &MockSyncerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncerFactory) EXPECT() *MockSyncerFactoryMockRecorder {
	return m.recorder
}

// CreateSyncer mocks base method.
func (m *MockSyncerFactory) CreateSyncer(kubeclient kubernetes.Interface, kubeutil *kube.Kube, radixclient versioned.Interface, radixBatch *v1.RadixBatch) batch.Syncer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSyncer", kubeclient, kubeutil, radixclient, radixBatch)
	ret0, _ := ret[0].(batch.Syncer)
	return ret0
}

// CreateSyncer indicates an expected call of CreateSyncer.
func (mr *MockSyncerFactoryMockRecorder) CreateSyncer(kubeclient, kubeutil, radixclient, radixBatch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSyncer", reflect.TypeOf((*MockSyncerFactory)(nil).CreateSyncer), kubeclient, kubeutil, radixclient, radixBatch)
}
