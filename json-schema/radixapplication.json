{
  "description": "RadixApplication describes an application",
  "properties": {
    "apiVersion": {
      "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
      "type": "string"
    },
    "kind": {
      "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
      "type": "string"
    },
    "metadata": {
      "type": "object"
    },
    "spec": {
      "description": "Specification for an application. More info: https://www.radix.equinor.com/references/reference-radix-config/",
      "properties": {
        "build": {
          "description": "Build contains configuration used by pipeline jobs. More info: https://www.radix.equinor.com/references/reference-radix-config/#build",
          "properties": {
            "secrets": {
              "description": "Defines a list of secrets that will be passed as ARGs when building Dockerfile. The secrets can also be accessed in sub-pipelines.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "useBuildKit": {
              "description": "Enables BuildKit when building Dockerfile. More info about BuildKit: https://docs.docker.com/build/buildkit/",
              "type": "boolean"
            },
            "variables": {
              "additionalProperties": {
                "type": "string"
              },
              "description": "Defines variables that will be available in sub-pipelines.",
              "type": "object"
            }
          },
          "type": "object"
        },
        "components": {
          "description": "List of component specification for the application. More info: https://www.radix.equinor.com/references/reference-radix-config/#components",
          "items": {
            "description": "RadixComponent defines a component.",
            "properties": {
              "alwaysPullImageOnDeploy": {
                "description": "Forces check/pull of images using static tags, e.g. myimage:latest, when deploying using deploy-only. More info: https://www.radix.equinor.com/references/reference-radix-config/#alwayspullimageondeploy",
                "type": "boolean"
              },
              "authentication": {
                "description": "Configuration for TLS client certificate or OAuth2 authentication. More info: https://www.radix.equinor.com/references/reference-radix-config/#authentication",
                "properties": {
                  "clientCertificate": {
                    "description": "Configuration for TLS client certificate authentication. More info: https://www.radix.equinor.com/references/reference-radix-config/#clientcertificate",
                    "properties": {
                      "passCertificateToUpstream": {
                        "description": "Pass client certificate to backend in header ssl-client-cert. This setting has no effect if verification is set to off.",
                        "type": "boolean"
                      },
                      "verification": {
                        "description": "Defines how the client certificate shall be verified.",
                        "enum": [
                          "on",
                          "off",
                          "optional",
                          "optional_no_ca"
                        ],
                        "type": "string"
                      }
                    },
                    "type": "object"
                  },
                  "oauth2": {
                    "description": "Configuration for OAuth2 authentication. More info: https://www.radix.equinor.com/references/reference-radix-config/#oauth2",
                    "properties": {
                      "clientId": {
                        "description": "Client ID of the application.",
                        "type": "string"
                      },
                      "cookie": {
                        "description": "Session cookie settings.",
                        "properties": {
                          "expire": {
                            "description": "Defines the expire timeframe for the session cookie.",
                            "type": "string"
                          },
                          "name": {
                            "description": "Defines the name of the OAuth session cookie.",
                            "type": "string"
                          },
                          "refresh": {
                            "description": "The interval between cookie refreshes. The value must be a shorter timeframe than values set in Expire.",
                            "type": "string"
                          },
                          "sameSite": {
                            "description": "Defines the samesite cookie attribute",
                            "enum": [
                              "strict",
                              "lax",
                              "none",
                              ""
                            ],
                            "type": "string"
                          }
                        },
                        "type": "object"
                      },
                      "cookieStore": {
                        "description": "Settings for the cookie that stores session data when SessionStoreType is cookie.",
                        "properties": {
                          "minimal": {
                            "description": "Strips OAuth tokens from cookies if they are not needed. Cookie.Refresh must be 0, and both SetXAuthRequestHeaders and SetAuthorizationHeader must be false if this setting is true.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "loginUrl": {
                        "description": "Defines the authentication endpoint of the identity provider. Must be set if OIDC.SkipDiscovery is true",
                        "type": "string"
                      },
                      "oidc": {
                        "description": "OIDC settings.",
                        "properties": {
                          "insecureSkipVerifyNonce": {
                            "description": "Skip verifying the OIDC ID Token's nonce claim",
                            "type": "boolean"
                          },
                          "issuerUrl": {
                            "description": "Defines the OIDC issuer URL.",
                            "type": "string"
                          },
                          "jwksUrl": {
                            "description": "Defines the OIDC JWKS URL for token verification. Required if OIDC discovery is disabled.",
                            "type": "string"
                          },
                          "skipDiscovery": {
                            "description": "Defines if OIDC endpoint discovery should be bypassed. LoginURL, RedeemURL, JWKSURL must be configured if discovery is disabled.",
                            "type": "boolean"
                          }
                        },
                        "type": "object"
                      },
                      "proxyPrefix": {
                        "description": "Defines the url root path that OAuth Proxy should be nested under.",
                        "type": "string"
                      },
                      "redeemUrl": {
                        "description": "Defines the endpoint to redeem the authorization code received from the OAuth code flow. Must be set if OIDC.SkipDiscovery is true",
                        "type": "string"
                      },
                      "redisStore": {
                        "description": "Settings for Redis store when SessionStoreType is redis.",
                        "properties": {
                          "connectionUrl": {
                            "description": "Defines the URL for the Redis server.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "connectionUrl"
                        ],
                        "type": "object"
                      },
                      "scope": {
                        "description": "Requested scopes.",
                        "type": "string"
                      },
                      "sessionStoreType": {
                        "description": "Defines where to store session data.",
                        "enum": [
                          "cookie",
                          "redis"
                        ],
                        "type": "string"
                      },
                      "setAuthorizationHeader": {
                        "description": "Defines if the IDToken received by the OAuth Proxy should be added to the Authorization header.",
                        "type": "boolean"
                      },
                      "setXAuthRequestHeaders": {
                        "description": "Defines if claims from the access token is added to the X-Auth-Request-User, X-Auth-Request-Groups, X-Auth-Request-Email and X-Auth-Request-Preferred-Username request headers. The access token is passed in the X-Auth-Request-Access-Token header.",
                        "type": "boolean"
                      }
                    },
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "dockerfileName": {
                "description": "Name of the Dockerfile that builds the component. More info: https://www.radix.equinor.com/references/reference-radix-config/#dockerfilename",
                "type": "string"
              },
              "enabled": {
                "description": "Controls if the component shall be deployed. More info: https://www.radix.equinor.com/references/reference-radix-config/#enabled",
                "type": "boolean"
              },
              "environmentConfig": {
                "description": "Configure environment specific settings for the component. More info: https://www.radix.equinor.com/references/reference-radix-config/#environmentconfig",
                "items": {
                  "description": "RadixEnvironmentConfig defines environment specific settings for component.",
                  "properties": {
                    "alwaysPullImageOnDeploy": {
                      "description": "Forces check/pull of images using static tags, e.g. myimage:latest, when deploying using deploy-only.",
                      "type": "boolean"
                    },
                    "authentication": {
                      "description": "Environment specific configuration for TLS client certificate or OAuth2 authentication. More info: https://www.radix.equinor.com/references/reference-radix-config/#authentication",
                      "properties": {
                        "clientCertificate": {
                          "description": "Configuration for TLS client certificate authentication. More info: https://www.radix.equinor.com/references/reference-radix-config/#clientcertificate",
                          "properties": {
                            "passCertificateToUpstream": {
                              "description": "Pass client certificate to backend in header ssl-client-cert. This setting has no effect if verification is set to off.",
                              "type": "boolean"
                            },
                            "verification": {
                              "description": "Defines how the client certificate shall be verified.",
                              "enum": [
                                "on",
                                "off",
                                "optional",
                                "optional_no_ca"
                              ],
                              "type": "string"
                            }
                          },
                          "type": "object"
                        },
                        "oauth2": {
                          "description": "Configuration for OAuth2 authentication. More info: https://www.radix.equinor.com/references/reference-radix-config/#oauth2",
                          "properties": {
                            "clientId": {
                              "description": "Client ID of the application.",
                              "type": "string"
                            },
                            "cookie": {
                              "description": "Session cookie settings.",
                              "properties": {
                                "expire": {
                                  "description": "Defines the expire timeframe for the session cookie.",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Defines the name of the OAuth session cookie.",
                                  "type": "string"
                                },
                                "refresh": {
                                  "description": "The interval between cookie refreshes. The value must be a shorter timeframe than values set in Expire.",
                                  "type": "string"
                                },
                                "sameSite": {
                                  "description": "Defines the samesite cookie attribute",
                                  "enum": [
                                    "strict",
                                    "lax",
                                    "none",
                                    ""
                                  ],
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            },
                            "cookieStore": {
                              "description": "Settings for the cookie that stores session data when SessionStoreType is cookie.",
                              "properties": {
                                "minimal": {
                                  "description": "Strips OAuth tokens from cookies if they are not needed. Cookie.Refresh must be 0, and both SetXAuthRequestHeaders and SetAuthorizationHeader must be false if this setting is true.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "loginUrl": {
                              "description": "Defines the authentication endpoint of the identity provider. Must be set if OIDC.SkipDiscovery is true",
                              "type": "string"
                            },
                            "oidc": {
                              "description": "OIDC settings.",
                              "properties": {
                                "insecureSkipVerifyNonce": {
                                  "description": "Skip verifying the OIDC ID Token's nonce claim",
                                  "type": "boolean"
                                },
                                "issuerUrl": {
                                  "description": "Defines the OIDC issuer URL.",
                                  "type": "string"
                                },
                                "jwksUrl": {
                                  "description": "Defines the OIDC JWKS URL for token verification. Required if OIDC discovery is disabled.",
                                  "type": "string"
                                },
                                "skipDiscovery": {
                                  "description": "Defines if OIDC endpoint discovery should be bypassed. LoginURL, RedeemURL, JWKSURL must be configured if discovery is disabled.",
                                  "type": "boolean"
                                }
                              },
                              "type": "object"
                            },
                            "proxyPrefix": {
                              "description": "Defines the url root path that OAuth Proxy should be nested under.",
                              "type": "string"
                            },
                            "redeemUrl": {
                              "description": "Defines the endpoint to redeem the authorization code received from the OAuth code flow. Must be set if OIDC.SkipDiscovery is true",
                              "type": "string"
                            },
                            "redisStore": {
                              "description": "Settings for Redis store when SessionStoreType is redis.",
                              "properties": {
                                "connectionUrl": {
                                  "description": "Defines the URL for the Redis server.",
                                  "type": "string"
                                }
                              },
                              "required": [
                                "connectionUrl"
                              ],
                              "type": "object"
                            },
                            "scope": {
                              "description": "Requested scopes.",
                              "type": "string"
                            },
                            "sessionStoreType": {
                              "description": "Defines where to store session data.",
                              "enum": [
                                "cookie",
                                "redis"
                              ],
                              "type": "string"
                            },
                            "setAuthorizationHeader": {
                              "description": "Defines if the IDToken received by the OAuth Proxy should be added to the Authorization header.",
                              "type": "boolean"
                            },
                            "setXAuthRequestHeaders": {
                              "description": "Defines if claims from the access token is added to the X-Auth-Request-User, X-Auth-Request-Groups, X-Auth-Request-Email and X-Auth-Request-Preferred-Username request headers. The access token is passed in the X-Auth-Request-Access-Token header.",
                              "type": "boolean"
                            }
                          },
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "enabled": {
                      "description": "Controls if the component shall be deployed to this environment. More info: https://www.radix.equinor.com/references/reference-radix-config/#enabled",
                      "type": "boolean"
                    },
                    "environment": {
                      "description": "Name of the environment which the settings applies to.",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                      "type": "string"
                    },
                    "horizontalScaling": {
                      "description": "Configuration for automatic horizontal scaling of replicas. More info: https://www.radix.equinor.com/references/reference-radix-config/#horizontalscaling",
                      "properties": {
                        "maxReplicas": {
                          "description": "Defines the maximum number of replicas.",
                          "format": "int32",
                          "minimum": 1,
                          "type": "integer"
                        },
                        "minReplicas": {
                          "description": "Defines the minimum number of replicas.",
                          "format": "int32",
                          "minimum": 0,
                          "type": "integer"
                        }
                      },
                      "required": [
                        "maxReplicas"
                      ],
                      "type": "object"
                    },
                    "identity": {
                      "description": "Environment specific configuration for workload identity (federated credentials). More info: https://www.radix.equinor.com/references/reference-radix-config/#identity",
                      "properties": {
                        "azure": {
                          "description": "Azure identity configuration",
                          "properties": {
                            "clientId": {
                              "description": "Defines the Client ID for a user defined managed identity or application ID for an application registration.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "clientId"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "imageTagName": {
                      "description": "The imageTagName allows for flexible configuration of fixed images, built outside of Radix, to be configured with separate tag for each environment. More info: https://www.radix.equinor.com/references/reference-radix-config/#imagetagname",
                      "type": "string"
                    },
                    "monitoring": {
                      "description": "Enabled or disables collection of custom Prometheus metrics. More info: https://www.radix.equinor.com/references/reference-radix-config/#monitoring",
                      "type": "boolean"
                    },
                    "node": {
                      "description": "Environment specific GPU requirements for the component. More info: https://www.radix.equinor.com/references/reference-radix-config/#node",
                      "properties": {
                        "gpu": {
                          "description": "Defines rules for allowed GPU types. More info: https://www.radix.equinor.com/references/reference-radix-config/#gpu",
                          "minLength": 1,
                          "type": "string"
                        },
                        "gpuCount": {
                          "description": "Defines minimum number of required GPUs.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "replicas": {
                      "description": "Number of desired replicas. More info: https://www.radix.equinor.com/references/reference-radix-config/#replicas",
                      "minimum": 0,
                      "type": "integer"
                    },
                    "resources": {
                      "description": "Environment specific configuration for CPU and memory resources. More info: https://www.radix.equinor.com/references/reference-radix-config/#resources",
                      "properties": {
                        "limits": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed.",
                          "type": "object"
                        },
                        "requests": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value.",
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "secretRefs": {
                      "description": "Environment specific configuration for external secret stores, like Azure KeyVault. More info: https://www.radix.equinor.com/references/reference-radix-config/#secretrefs",
                      "properties": {
                        "azureKeyVaults": {
                          "description": "List of Azure keyvaults to get secrets from.",
                          "items": {
                            "description": "RadixAzureKeyVault defines an Azure keyvault.",
                            "properties": {
                              "items": {
                                "description": "List of keyvault items (secrets, keys and certificates).",
                                "items": {
                                  "description": "RadixAzureKeyVaultItem defines Azure Key Vault setting: secrets, keys, certificates",
                                  "properties": {
                                    "alias": {
                                      "description": "Alias overrides the default file name used when mounting the secret, key or certificate.",
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "encoding": {
                                      "description": "Encoding defines the encoding of a keyvault item when stored in the container. Setting encoding to base64 and format to pfx will fetch and write the base64 decoded pfx binary.",
                                      "enum": [
                                        "base64"
                                      ],
                                      "type": "string"
                                    },
                                    "envVar": {
                                      "description": "Defines the name of the environment variable that will contain the value of the secret, key or certificate.",
                                      "type": "string"
                                    },
                                    "format": {
                                      "description": "Defines the format of the keyvault item. pfx is only supported with type secret and PKCS12 or ECC certificate. Default format for certificates is pem.",
                                      "enum": [
                                        "pem",
                                        "pfx"
                                      ],
                                      "type": "string"
                                    },
                                    "k8sSecretType": {
                                      "description": "k8sSecretType defines the type of Kubernetes secret the keyvault item will be stored in. opaque corresponds to \"Opaque\" and \"kubernetes.io/tls\" secret types: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
                                      "enum": [
                                        "opaque",
                                        "tls"
                                      ],
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name of a secret, key or certificate in the keyvault.",
                                      "maxLength": 127,
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type of item in the keyvault referenced by the name.",
                                      "enum": [
                                        "secret",
                                        "key",
                                        "cert"
                                      ],
                                      "type": "string"
                                    },
                                    "version": {
                                      "description": "Defines that a specific version of a keyvault item should be loaded. The latest version is loaded when this field is not set.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "minItems": 1,
                                "type": "array"
                              },
                              "name": {
                                "description": "Name of the Azure keyvault.",
                                "maxLength": 24,
                                "minLength": 3,
                                "type": "string"
                              },
                              "path": {
                                "description": "Path where secrets from the keyvault is mounted.",
                                "minLength": 1,
                                "type": "string"
                              }
                            },
                            "required": [
                              "items",
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "variables": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Environment specific environment variables. Variable names defined here have precedence over variables defined on component level.",
                      "type": "object"
                    },
                    "volumeMounts": {
                      "description": "Configuration for mounting cloud storage into the component. More info: https://www.radix.equinor.com/references/reference-radix-config/#volumemounts",
                      "items": {
                        "description": "RadixVolumeMount defines an external storage resource.",
                        "properties": {
                          "accessMode": {
                            "description": "TODO: describe More info: https://www.radix.equinor.com/guides/volume-mounts/optional-settings/",
                            "enum": [
                              "ReadOnlyMany",
                              "ReadWriteOnce",
                              "ReadWriteMany"
                            ],
                            "type": "string"
                          },
                          "bindingMode": {
                            "description": "TODO: describe More info: https://www.radix.equinor.com/guides/volume-mounts/optional-settings/",
                            "enum": [
                              "Immediate",
                              "WaitForFirstConsumer"
                            ],
                            "type": "string"
                          },
                          "container": {
                            "description": "Deprecated. Only required by the deprecated type: blob.",
                            "type": "string"
                          },
                          "gid": {
                            "description": "GID defines the group ID (number) which will be set as owner of the mounted volume.",
                            "type": "string"
                          },
                          "name": {
                            "description": "User defined name of the volume mount. Must be unique for the component.",
                            "minLength": 1,
                            "type": "string"
                          },
                          "path": {
                            "description": "Path defines in which directory the external storage is mounted.",
                            "minLength": 1,
                            "type": "string"
                          },
                          "requestsStorage": {
                            "description": "TODO: describe More info: https://www.radix.equinor.com/guides/volume-mounts/optional-settings/",
                            "type": "string"
                          },
                          "skuName": {
                            "description": "TODO: describe More info: https://www.radix.equinor.com/guides/volume-mounts/optional-settings/",
                            "type": "string"
                          },
                          "storage": {
                            "description": "Storage defines the name of the container in the external storage resource.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type defines the storage type. blob is deprecated, use azure-blob instead.",
                            "enum": [
                              "blob",
                              "azure-blob",
                              "azure-file"
                            ],
                            "type": "string"
                          },
                          "uid": {
                            "description": "UID defines the user ID (number) which will be set as owner of the mounted volume.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "path",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "environment"
                  ],
                  "type": "object"
                },
                "type": "array",
                "x-kubernetes-list-map-keys": [
                  "environment"
                ],
                "x-kubernetes-list-type": "map"
              },
              "identity": {
                "description": "Configuration for workload identity (federated credentials). More info: https://www.radix.equinor.com/references/reference-radix-config/#identity",
                "properties": {
                  "azure": {
                    "description": "Azure identity configuration",
                    "properties": {
                      "clientId": {
                        "description": "Defines the Client ID for a user defined managed identity or application ID for an application registration.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "clientId"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "image": {
                "description": "Name of an existing container image to use when running the component. More info: https://www.radix.equinor.com/references/reference-radix-config/#image",
                "type": "string"
              },
              "ingressConfiguration": {
                "description": "Additional configuration settings for ingress traffic. More info: https://www.radix.equinor.com/references/reference-radix-config/#ingressconfiguration",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "monitoringConfig": {
                "description": "Configures the monitoring endpoint exposed by the component. This endpoint is used by Prometheus to collect custom metrics. environmentConfig.monitoring must be set to true to enable collection of metrics for an environment. More info: https://www.radix.equinor.com/references/reference-radix-config/#monitoringconfig",
                "properties": {
                  "path": {
                    "description": "Defines the path where metrics is served.",
                    "type": "string"
                  },
                  "portName": {
                    "description": "Defines which port in the ports list where metrics is served.",
                    "maxLength": 15,
                    "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "name": {
                "description": "Name of the component.",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                "type": "string"
              },
              "node": {
                "description": "Defines GPU requirements for the component. More info: https://www.radix.equinor.com/references/reference-radix-config/#node",
                "properties": {
                  "gpu": {
                    "description": "Defines rules for allowed GPU types. More info: https://www.radix.equinor.com/references/reference-radix-config/#gpu",
                    "minLength": 1,
                    "type": "string"
                  },
                  "gpuCount": {
                    "description": "Defines minimum number of required GPUs.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "ports": {
                "description": "List of ports that the component bind to.",
                "items": {
                  "description": "ComponentPort defines a named port.",
                  "properties": {
                    "name": {
                      "description": "Name of the port.",
                      "maxLength": 15,
                      "minLength": 1,
                      "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                      "type": "string"
                    },
                    "port": {
                      "description": "Port number.",
                      "format": "int32",
                      "maximum": 65535,
                      "minimum": 1024,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "name",
                    "port"
                  ],
                  "type": "object"
                },
                "minItems": 1,
                "type": "array",
                "x-kubernetes-list-map-keys": [
                  "name"
                ],
                "x-kubernetes-list-type": "map"
              },
              "public": {
                "description": "Deprecated, use publicPort instead.",
                "type": "boolean"
              },
              "publicPort": {
                "description": "Defines which port (name) from the ports list that shall be accessible from the internet. More info: https://www.radix.equinor.com/references/reference-radix-config/#publicport",
                "maxLength": 15,
                "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                "type": "string"
              },
              "resources": {
                "description": "Configures CPU and memory resources for the component. More info: https://www.radix.equinor.com/references/reference-radix-config/#resources-common",
                "properties": {
                  "limits": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Limits describes the maximum amount of compute resources allowed.",
                    "type": "object"
                  },
                  "requests": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "secretRefs": {
                "description": "Configuration for external secret stores, like Azure KeyVault. More info: https://www.radix.equinor.com/references/reference-radix-config/#secretrefs",
                "properties": {
                  "azureKeyVaults": {
                    "description": "List of Azure keyvaults to get secrets from.",
                    "items": {
                      "description": "RadixAzureKeyVault defines an Azure keyvault.",
                      "properties": {
                        "items": {
                          "description": "List of keyvault items (secrets, keys and certificates).",
                          "items": {
                            "description": "RadixAzureKeyVaultItem defines Azure Key Vault setting: secrets, keys, certificates",
                            "properties": {
                              "alias": {
                                "description": "Alias overrides the default file name used when mounting the secret, key or certificate.",
                                "minLength": 1,
                                "type": "string"
                              },
                              "encoding": {
                                "description": "Encoding defines the encoding of a keyvault item when stored in the container. Setting encoding to base64 and format to pfx will fetch and write the base64 decoded pfx binary.",
                                "enum": [
                                  "base64"
                                ],
                                "type": "string"
                              },
                              "envVar": {
                                "description": "Defines the name of the environment variable that will contain the value of the secret, key or certificate.",
                                "type": "string"
                              },
                              "format": {
                                "description": "Defines the format of the keyvault item. pfx is only supported with type secret and PKCS12 or ECC certificate. Default format for certificates is pem.",
                                "enum": [
                                  "pem",
                                  "pfx"
                                ],
                                "type": "string"
                              },
                              "k8sSecretType": {
                                "description": "k8sSecretType defines the type of Kubernetes secret the keyvault item will be stored in. opaque corresponds to \"Opaque\" and \"kubernetes.io/tls\" secret types: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
                                "enum": [
                                  "opaque",
                                  "tls"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of a secret, key or certificate in the keyvault.",
                                "maxLength": 127,
                                "minLength": 1,
                                "type": "string"
                              },
                              "type": {
                                "description": "Type of item in the keyvault referenced by the name.",
                                "enum": [
                                  "secret",
                                  "key",
                                  "cert"
                                ],
                                "type": "string"
                              },
                              "version": {
                                "description": "Defines that a specific version of a keyvault item should be loaded. The latest version is loaded when this field is not set.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "type": "object"
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "name": {
                          "description": "Name of the Azure keyvault.",
                          "maxLength": 24,
                          "minLength": 3,
                          "type": "string"
                        },
                        "path": {
                          "description": "Path where secrets from the keyvault is mounted.",
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "items",
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "secrets": {
                "description": "List of secret environment variable names. More info: https://www.radix.equinor.com/references/reference-radix-config/#secrets",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "src": {
                "description": "Path to the Dockerfile that builds the component. More info: https://www.radix.equinor.com/references/reference-radix-config/#src",
                "type": "string"
              },
              "variables": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "List of environment variables and values. More info: https://www.radix.equinor.com/references/reference-radix-config/#variables-common",
                "type": "object"
              }
            },
            "required": [
              "name",
              "ports"
            ],
            "type": "object"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "dnsAppAlias": {
          "description": "Configure a component and environment to be linked to the app alias DNS record. More info: https://www.radix.equinor.com/references/reference-radix-config/#dnsappalias",
          "properties": {
            "component": {
              "description": "Name of the component that shall receive the incoming requests.",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
              "type": "string"
            },
            "environment": {
              "description": "Name of the environment for the component.",
              "maxLength": 63,
              "minLength": 1,
              "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
              "type": "string"
            }
          },
          "type": "object"
        },
        "dnsExternalAlias": {
          "description": "List of external DNS names and which component and environment incoming requests shall be routed to. More info: https://www.radix.equinor.com/references/reference-radix-config/#dnsexternalalias",
          "items": {
            "description": "ExternalAlias defines mapping between an external DNS name and a component and environment.",
            "properties": {
              "alias": {
                "description": "DNS name, e.g. myapp.example.com.",
                "maxLength": 255,
                "minLength": 4,
                "pattern": "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-]*[A-Za-z0-9])$",
                "type": "string"
              },
              "component": {
                "description": "Name of the component that shall receive the incoming requests.",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                "type": "string"
              },
              "environment": {
                "description": "Name of the environment for the component.",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                "type": "string"
              }
            },
            "required": [
              "alias",
              "component",
              "environment"
            ],
            "type": "object"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "alias"
          ],
          "x-kubernetes-list-type": "map"
        },
        "environments": {
          "description": "List of environments belonging to the application. More info: https://www.radix.equinor.com/references/reference-radix-config/#environments",
          "items": {
            "description": "Environment contains environment specific configuration.",
            "properties": {
              "build": {
                "description": "Build configuration for the environment. More info: https://www.radix.equinor.com/references/reference-radix-config/#build-2",
                "properties": {
                  "from": {
                    "description": "Name of the Github branch to build from",
                    "maxLength": 255,
                    "minLength": 1,
                    "type": "string"
                  },
                  "variables": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Defines variables that will be available in sub-pipelines",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "egress": {
                "description": "Configure egress traffic rules for components and jobs. More info: https://www.radix.equinor.com/references/reference-radix-config/#egress",
                "properties": {
                  "allowRadix": {
                    "description": "Allow or deny outgoing traffic to the public IP for the Radix cluster.",
                    "type": "boolean"
                  },
                  "rules": {
                    "description": "Defines a list of egress rules.",
                    "items": {
                      "description": "EgressRule defines an egress rule.",
                      "properties": {
                        "destinations": {
                          "description": "List of allowed destinations. Each destination must be a valid CIDR.",
                          "items": {
                            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
                            "type": "string"
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "ports": {
                          "description": "List of allowed ports.",
                          "items": {
                            "description": "EgressPort defines a port in context of EgressRule.",
                            "properties": {
                              "port": {
                                "format": "int32",
                                "maximum": 65535,
                                "minimum": 0,
                                "type": "integer"
                              },
                              "protocol": {
                                "enum": [
                                  "TCP",
                                  "UDP"
                                ],
                                "type": "string"
                              }
                            },
                            "required": [
                              "port",
                              "protocol"
                            ],
                            "type": "object"
                          },
                          "minItems": 1,
                          "type": "array"
                        }
                      },
                      "required": [
                        "destinations",
                        "ports"
                      ],
                      "type": "object"
                    },
                    "maxItems": 1000,
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "name": {
                "description": "Name of the environment.",
                "maxLength": 63,
                "minLength": 1,
                "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                "type": "string"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "jobs": {
          "description": "List of job specification for the application. More info: https://www.radix.equinor.com/references/reference-radix-config/#jobs",
          "items": {
            "description": "RadixJobComponent defines a single job component within a RadixApplication The job component is used by the radix-job-scheduler-server to create Kubernetes Job objects",
            "properties": {
              "dockerfileName": {
                "description": "Name of the Dockerfile that builds the job. More info: https://www.radix.equinor.com/references/reference-radix-config/#dockerfilename-2",
                "type": "string"
              },
              "enabled": {
                "description": "Controls if the job shall be deployed.",
                "type": "boolean"
              },
              "environmentConfig": {
                "description": "Configure environment specific settings for the job. More info: https://www.radix.equinor.com/references/reference-radix-config/#environmentconfig-2",
                "items": {
                  "description": "RadixJobComponentEnvironmentConfig defines environment specific settings for a single job component within a RadixApplication",
                  "properties": {
                    "enabled": {
                      "description": "Controls if the job shall be deployed to this environment.",
                      "type": "boolean"
                    },
                    "environment": {
                      "description": "Name of the environment which the settings applies to.",
                      "maxLength": 63,
                      "minLength": 1,
                      "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                      "type": "string"
                    },
                    "identity": {
                      "description": "Environment specific configuration for workload identity (federated credentials). More info: https://www.radix.equinor.com/references/reference-radix-config/#identity-2",
                      "properties": {
                        "azure": {
                          "description": "Azure identity configuration",
                          "properties": {
                            "clientId": {
                              "description": "Defines the Client ID for a user defined managed identity or application ID for an application registration.",
                              "type": "string"
                            }
                          },
                          "required": [
                            "clientId"
                          ],
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "imageTagName": {
                      "description": "The imageTagName allows for flexible configuration of fixed images, built outside of Radix, to be configured with separate tag for each environment. More info: https://www.radix.equinor.com/references/reference-radix-config/#imagetagname-2",
                      "type": "string"
                    },
                    "monitoring": {
                      "description": "Enabled or disables collection of custom Prometheus metrics. More info: https://www.radix.equinor.com/references/reference-radix-config/#monitoring-2",
                      "type": "boolean"
                    },
                    "node": {
                      "description": "Environment specific GPU requirements for the job. More info: https://www.radix.equinor.com/references/reference-radix-config/#node",
                      "properties": {
                        "gpu": {
                          "description": "Defines rules for allowed GPU types. More info: https://www.radix.equinor.com/references/reference-radix-config/#gpu",
                          "minLength": 1,
                          "type": "string"
                        },
                        "gpuCount": {
                          "description": "Defines minimum number of required GPUs.",
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "resources": {
                      "description": "Environment specific configuration for CPU and memory resources. More info: https://www.radix.equinor.com/references/reference-radix-config/#resources-3",
                      "properties": {
                        "limits": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Limits describes the maximum amount of compute resources allowed.",
                          "type": "object"
                        },
                        "requests": {
                          "additionalProperties": {
                            "type": "string"
                          },
                          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value.",
                          "type": "object"
                        }
                      },
                      "type": "object"
                    },
                    "secretRefs": {
                      "description": "Environment specific configuration for external secret stores, like Azure KeyVault. More info: https://www.radix.equinor.com/references/reference-radix-config/#secretrefs",
                      "properties": {
                        "azureKeyVaults": {
                          "description": "List of Azure keyvaults to get secrets from.",
                          "items": {
                            "description": "RadixAzureKeyVault defines an Azure keyvault.",
                            "properties": {
                              "items": {
                                "description": "List of keyvault items (secrets, keys and certificates).",
                                "items": {
                                  "description": "RadixAzureKeyVaultItem defines Azure Key Vault setting: secrets, keys, certificates",
                                  "properties": {
                                    "alias": {
                                      "description": "Alias overrides the default file name used when mounting the secret, key or certificate.",
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "encoding": {
                                      "description": "Encoding defines the encoding of a keyvault item when stored in the container. Setting encoding to base64 and format to pfx will fetch and write the base64 decoded pfx binary.",
                                      "enum": [
                                        "base64"
                                      ],
                                      "type": "string"
                                    },
                                    "envVar": {
                                      "description": "Defines the name of the environment variable that will contain the value of the secret, key or certificate.",
                                      "type": "string"
                                    },
                                    "format": {
                                      "description": "Defines the format of the keyvault item. pfx is only supported with type secret and PKCS12 or ECC certificate. Default format for certificates is pem.",
                                      "enum": [
                                        "pem",
                                        "pfx"
                                      ],
                                      "type": "string"
                                    },
                                    "k8sSecretType": {
                                      "description": "k8sSecretType defines the type of Kubernetes secret the keyvault item will be stored in. opaque corresponds to \"Opaque\" and \"kubernetes.io/tls\" secret types: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
                                      "enum": [
                                        "opaque",
                                        "tls"
                                      ],
                                      "type": "string"
                                    },
                                    "name": {
                                      "description": "Name of a secret, key or certificate in the keyvault.",
                                      "maxLength": 127,
                                      "minLength": 1,
                                      "type": "string"
                                    },
                                    "type": {
                                      "description": "Type of item in the keyvault referenced by the name.",
                                      "enum": [
                                        "secret",
                                        "key",
                                        "cert"
                                      ],
                                      "type": "string"
                                    },
                                    "version": {
                                      "description": "Defines that a specific version of a keyvault item should be loaded. The latest version is loaded when this field is not set.",
                                      "type": "string"
                                    }
                                  },
                                  "required": [
                                    "name"
                                  ],
                                  "type": "object"
                                },
                                "minItems": 1,
                                "type": "array"
                              },
                              "name": {
                                "description": "Name of the Azure keyvault.",
                                "maxLength": 24,
                                "minLength": 3,
                                "type": "string"
                              },
                              "path": {
                                "description": "Path where secrets from the keyvault is mounted.",
                                "minLength": 1,
                                "type": "string"
                              }
                            },
                            "required": [
                              "items",
                              "name"
                            ],
                            "type": "object"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "timeLimitSeconds": {
                      "description": "Environment specific value for the maximum number of seconds the job can run. More info: https://www.radix.equinor.com/references/reference-radix-config/#timelimitseconds-2",
                      "format": "int64",
                      "type": "integer"
                    },
                    "variables": {
                      "additionalProperties": {
                        "type": "string"
                      },
                      "description": "Environment specific environment variables. More info: https://www.radix.equinor.com/references/reference-radix-config/#variables-2",
                      "type": "object"
                    },
                    "volumeMounts": {
                      "description": "Configuration for mounting cloud storage into the job. More info: https://www.radix.equinor.com/references/reference-radix-config/#volumemounts-2",
                      "items": {
                        "description": "RadixVolumeMount defines an external storage resource.",
                        "properties": {
                          "accessMode": {
                            "description": "TODO: describe More info: https://www.radix.equinor.com/guides/volume-mounts/optional-settings/",
                            "enum": [
                              "ReadOnlyMany",
                              "ReadWriteOnce",
                              "ReadWriteMany"
                            ],
                            "type": "string"
                          },
                          "bindingMode": {
                            "description": "TODO: describe More info: https://www.radix.equinor.com/guides/volume-mounts/optional-settings/",
                            "enum": [
                              "Immediate",
                              "WaitForFirstConsumer"
                            ],
                            "type": "string"
                          },
                          "container": {
                            "description": "Deprecated. Only required by the deprecated type: blob.",
                            "type": "string"
                          },
                          "gid": {
                            "description": "GID defines the group ID (number) which will be set as owner of the mounted volume.",
                            "type": "string"
                          },
                          "name": {
                            "description": "User defined name of the volume mount. Must be unique for the component.",
                            "minLength": 1,
                            "type": "string"
                          },
                          "path": {
                            "description": "Path defines in which directory the external storage is mounted.",
                            "minLength": 1,
                            "type": "string"
                          },
                          "requestsStorage": {
                            "description": "TODO: describe More info: https://www.radix.equinor.com/guides/volume-mounts/optional-settings/",
                            "type": "string"
                          },
                          "skuName": {
                            "description": "TODO: describe More info: https://www.radix.equinor.com/guides/volume-mounts/optional-settings/",
                            "type": "string"
                          },
                          "storage": {
                            "description": "Storage defines the name of the container in the external storage resource.",
                            "type": "string"
                          },
                          "type": {
                            "description": "Type defines the storage type. blob is deprecated, use azure-blob instead.",
                            "enum": [
                              "blob",
                              "azure-blob",
                              "azure-file"
                            ],
                            "type": "string"
                          },
                          "uid": {
                            "description": "UID defines the user ID (number) which will be set as owner of the mounted volume.",
                            "type": "string"
                          }
                        },
                        "required": [
                          "name",
                          "path",
                          "type"
                        ],
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "required": [
                    "environment"
                  ],
                  "type": "object"
                },
                "type": "array",
                "x-kubernetes-list-map-keys": [
                  "environment"
                ],
                "x-kubernetes-list-type": "map"
              },
              "identity": {
                "description": "Configuration for workload identity (federated credentials). More info: https://www.radix.equinor.com/references/reference-radix-config/#identity-2",
                "properties": {
                  "azure": {
                    "description": "Azure identity configuration",
                    "properties": {
                      "clientId": {
                        "description": "Defines the Client ID for a user defined managed identity or application ID for an application registration.",
                        "type": "string"
                      }
                    },
                    "required": [
                      "clientId"
                    ],
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "image": {
                "description": "Name of an existing container image to use when running the job. More info: https://www.radix.equinor.com/references/reference-radix-config/#image-2",
                "type": "string"
              },
              "monitoringConfig": {
                "description": "Configures the monitoring endpoint exposed by the job. This endpoint is used by Prometheus to collect custom metrics. environmentConfig.monitoring must be set to true to enable collection of metrics for an environment. More info: https://www.radix.equinor.com/references/reference-radix-config/#monitoringconfig-2",
                "properties": {
                  "path": {
                    "description": "Defines the path where metrics is served.",
                    "type": "string"
                  },
                  "portName": {
                    "description": "Defines which port in the ports list where metrics is served.",
                    "maxLength": 15,
                    "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "name": {
                "description": "Name of the environment which the settings applies to.",
                "maxLength": 253,
                "minLength": 1,
                "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                "type": "string"
              },
              "node": {
                "description": "Defines GPU requirements for the job. More info: https://www.radix.equinor.com/references/reference-radix-config/#node",
                "properties": {
                  "gpu": {
                    "description": "Defines rules for allowed GPU types. More info: https://www.radix.equinor.com/references/reference-radix-config/#gpu",
                    "minLength": 1,
                    "type": "string"
                  },
                  "gpuCount": {
                    "description": "Defines minimum number of required GPUs.",
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "payload": {
                "description": "Defines the path where the job payload is mounted. More info: https://www.radix.equinor.com/references/reference-radix-config/#payload",
                "properties": {
                  "path": {
                    "description": "Path to the folder where payload is mounted",
                    "minLength": 1,
                    "type": "string"
                  }
                },
                "required": [
                  "path"
                ],
                "type": "object"
              },
              "ports": {
                "description": "List of ports that the job bind to.",
                "items": {
                  "description": "ComponentPort defines a named port.",
                  "properties": {
                    "name": {
                      "description": "Name of the port.",
                      "maxLength": 15,
                      "minLength": 1,
                      "pattern": "^(([a-z0-9][-a-z0-9.]*)?[a-z0-9])?$",
                      "type": "string"
                    },
                    "port": {
                      "description": "Port number.",
                      "format": "int32",
                      "maximum": 65535,
                      "minimum": 1024,
                      "type": "integer"
                    }
                  },
                  "required": [
                    "name",
                    "port"
                  ],
                  "type": "object"
                },
                "type": "array",
                "x-kubernetes-list-map-keys": [
                  "name"
                ],
                "x-kubernetes-list-type": "map"
              },
              "resources": {
                "description": "Configures CPU and memory resources for the job. More info: https://www.radix.equinor.com/references/reference-radix-config/#resources-common-2",
                "properties": {
                  "limits": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Limits describes the maximum amount of compute resources allowed.",
                    "type": "object"
                  },
                  "requests": {
                    "additionalProperties": {
                      "type": "string"
                    },
                    "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "schedulerPort": {
                "description": "Defines the port number that the job-scheduler API server will listen to. More info: https://www.radix.equinor.com/references/reference-radix-config/#schedulerport",
                "format": "int32",
                "maximum": 65535,
                "minimum": 1024,
                "type": "integer"
              },
              "secretRefs": {
                "description": "Configuration for external secret stores, like Azure KeyVault. More info: https://www.radix.equinor.com/references/reference-radix-config/#secretrefs",
                "properties": {
                  "azureKeyVaults": {
                    "description": "List of Azure keyvaults to get secrets from.",
                    "items": {
                      "description": "RadixAzureKeyVault defines an Azure keyvault.",
                      "properties": {
                        "items": {
                          "description": "List of keyvault items (secrets, keys and certificates).",
                          "items": {
                            "description": "RadixAzureKeyVaultItem defines Azure Key Vault setting: secrets, keys, certificates",
                            "properties": {
                              "alias": {
                                "description": "Alias overrides the default file name used when mounting the secret, key or certificate.",
                                "minLength": 1,
                                "type": "string"
                              },
                              "encoding": {
                                "description": "Encoding defines the encoding of a keyvault item when stored in the container. Setting encoding to base64 and format to pfx will fetch and write the base64 decoded pfx binary.",
                                "enum": [
                                  "base64"
                                ],
                                "type": "string"
                              },
                              "envVar": {
                                "description": "Defines the name of the environment variable that will contain the value of the secret, key or certificate.",
                                "type": "string"
                              },
                              "format": {
                                "description": "Defines the format of the keyvault item. pfx is only supported with type secret and PKCS12 or ECC certificate. Default format for certificates is pem.",
                                "enum": [
                                  "pem",
                                  "pfx"
                                ],
                                "type": "string"
                              },
                              "k8sSecretType": {
                                "description": "k8sSecretType defines the type of Kubernetes secret the keyvault item will be stored in. opaque corresponds to \"Opaque\" and \"kubernetes.io/tls\" secret types: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
                                "enum": [
                                  "opaque",
                                  "tls"
                                ],
                                "type": "string"
                              },
                              "name": {
                                "description": "Name of a secret, key or certificate in the keyvault.",
                                "maxLength": 127,
                                "minLength": 1,
                                "type": "string"
                              },
                              "type": {
                                "description": "Type of item in the keyvault referenced by the name.",
                                "enum": [
                                  "secret",
                                  "key",
                                  "cert"
                                ],
                                "type": "string"
                              },
                              "version": {
                                "description": "Defines that a specific version of a keyvault item should be loaded. The latest version is loaded when this field is not set.",
                                "type": "string"
                              }
                            },
                            "required": [
                              "name"
                            ],
                            "type": "object"
                          },
                          "minItems": 1,
                          "type": "array"
                        },
                        "name": {
                          "description": "Name of the Azure keyvault.",
                          "maxLength": 24,
                          "minLength": 3,
                          "type": "string"
                        },
                        "path": {
                          "description": "Path where secrets from the keyvault is mounted.",
                          "minLength": 1,
                          "type": "string"
                        }
                      },
                      "required": [
                        "items",
                        "name"
                      ],
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              },
              "secrets": {
                "description": "List of secret environment variable names. More info: https://www.radix.equinor.com/references/reference-radix-config/#secrets-2",
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "src": {
                "description": "Path to the Dockerfile that builds the job. More info: https://www.radix.equinor.com/references/reference-radix-config/#src-2",
                "type": "string"
              },
              "timeLimitSeconds": {
                "description": "The maximum number of seconds the job can run. More info: https://www.radix.equinor.com/references/reference-radix-config/#timelimitseconds",
                "format": "int64",
                "type": "integer"
              },
              "variables": {
                "additionalProperties": {
                  "type": "string"
                },
                "description": "List of environment variables and values. More info: https://www.radix.equinor.com/references/reference-radix-config/#variables-common-2",
                "type": "object"
              }
            },
            "required": [
              "name"
            ],
            "type": "object"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "privateImageHubs": {
          "additionalProperties": {
            "description": "RadixPrivateImageHubCredential contains credentials to use when pulling images from a protected container registry.",
            "properties": {
              "email": {
                "description": "The email address linked to the username.",
                "minLength": 1,
                "type": "string"
              },
              "username": {
                "description": "User name with permission to pull images. The password is set in Radix Web Console.",
                "minLength": 1,
                "type": "string"
              }
            },
            "required": [
              "email",
              "username"
            ],
            "type": "object"
          },
          "description": "Defines protected container registries used by components or jobs. More info: https://www.radix.equinor.com/references/reference-radix-config/#privateimagehubs",
          "type": "object"
        }
      },
      "required": [
        "environments"
      ],
      "type": "object"
    }
  },
  "required": [
    "metadata",
    "spec"
  ],
  "type": "object"
}
