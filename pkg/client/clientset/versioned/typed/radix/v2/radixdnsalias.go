/*
MIT License

Copyright (c) 2024 Equinor

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
// Code generated by client-gen. DO NOT EDIT.

package v2

import (
	context "context"

	radixv2 "github.com/equinor/radix-operator/pkg/apis/radix/v2"
	scheme "github.com/equinor/radix-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// RadixDNSAliasesGetter has a method to return a RadixDNSAliasInterface.
// A group's client should implement this interface.
type RadixDNSAliasesGetter interface {
	RadixDNSAliases() RadixDNSAliasInterface
}

// RadixDNSAliasInterface has methods to work with RadixDNSAlias resources.
type RadixDNSAliasInterface interface {
	Create(ctx context.Context, radixDNSAlias *radixv2.RadixDNSAlias, opts v1.CreateOptions) (*radixv2.RadixDNSAlias, error)
	Update(ctx context.Context, radixDNSAlias *radixv2.RadixDNSAlias, opts v1.UpdateOptions) (*radixv2.RadixDNSAlias, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, radixDNSAlias *radixv2.RadixDNSAlias, opts v1.UpdateOptions) (*radixv2.RadixDNSAlias, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*radixv2.RadixDNSAlias, error)
	List(ctx context.Context, opts v1.ListOptions) (*radixv2.RadixDNSAliasList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *radixv2.RadixDNSAlias, err error)
	RadixDNSAliasExpansion
}

// radixDNSAliases implements RadixDNSAliasInterface
type radixDNSAliases struct {
	*gentype.ClientWithList[*radixv2.RadixDNSAlias, *radixv2.RadixDNSAliasList]
}

// newRadixDNSAliases returns a RadixDNSAliases
func newRadixDNSAliases(c *RadixV2Client) *radixDNSAliases {
	return &radixDNSAliases{
		gentype.NewClientWithList[*radixv2.RadixDNSAlias, *radixv2.RadixDNSAliasList](
			"radixdnsaliases",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *radixv2.RadixDNSAlias { return &radixv2.RadixDNSAlias{} },
			func() *radixv2.RadixDNSAliasList { return &radixv2.RadixDNSAliasList{} },
		),
	}
}
