/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/statoil/radix-operator/pkg/apis/radix/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RadixApplicationLister helps list RadixApplications.
type RadixApplicationLister interface {
	// List lists all RadixApplications in the indexer.
	List(selector labels.Selector) (ret []*v1.RadixApplication, err error)
	// RadixApplications returns an object that can list and get RadixApplications.
	RadixApplications(namespace string) RadixApplicationNamespaceLister
	RadixApplicationListerExpansion
}

// radixApplicationLister implements the RadixApplicationLister interface.
type radixApplicationLister struct {
	indexer cache.Indexer
}

// NewRadixApplicationLister returns a new RadixApplicationLister.
func NewRadixApplicationLister(indexer cache.Indexer) RadixApplicationLister {
	return &radixApplicationLister{indexer: indexer}
}

// List lists all RadixApplications in the indexer.
func (s *radixApplicationLister) List(selector labels.Selector) (ret []*v1.RadixApplication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RadixApplication))
	})
	return ret, err
}

// RadixApplications returns an object that can list and get RadixApplications.
func (s *radixApplicationLister) RadixApplications(namespace string) RadixApplicationNamespaceLister {
	return radixApplicationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RadixApplicationNamespaceLister helps list and get RadixApplications.
type RadixApplicationNamespaceLister interface {
	// List lists all RadixApplications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.RadixApplication, err error)
	// Get retrieves the RadixApplication from the indexer for a given namespace and name.
	Get(name string) (*v1.RadixApplication, error)
	RadixApplicationNamespaceListerExpansion
}

// radixApplicationNamespaceLister implements the RadixApplicationNamespaceLister
// interface.
type radixApplicationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RadixApplications in the indexer for a given namespace.
func (s radixApplicationNamespaceLister) List(selector labels.Selector) (ret []*v1.RadixApplication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RadixApplication))
	})
	return ret, err
}

// Get retrieves the RadixApplication from the indexer for a given namespace and name.
func (s radixApplicationNamespaceLister) Get(name string) (*v1.RadixApplication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("radixapplication"), name)
	}
	return obj.(*v1.RadixApplication), nil
}
