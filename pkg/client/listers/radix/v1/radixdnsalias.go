/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RadixDNSAliasLister helps list RadixDNSAliases.
// All objects returned here must be treated as read-only.
type RadixDNSAliasLister interface {
	// List lists all RadixDNSAliases in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RadixDNSAlias, err error)
	// RadixDNSAliases returns an object that can list and get RadixDNSAliases.
	RadixDNSAliases(namespace string) RadixDNSAliasNamespaceLister
	RadixDNSAliasListerExpansion
}

// radixDNSAliasLister implements the RadixDNSAliasLister interface.
type radixDNSAliasLister struct {
	indexer cache.Indexer
}

// NewRadixDNSAliasLister returns a new RadixDNSAliasLister.
func NewRadixDNSAliasLister(indexer cache.Indexer) RadixDNSAliasLister {
	return &radixDNSAliasLister{indexer: indexer}
}

// List lists all RadixDNSAliases in the indexer.
func (s *radixDNSAliasLister) List(selector labels.Selector) (ret []*v1.RadixDNSAlias, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RadixDNSAlias))
	})
	return ret, err
}

// RadixDNSAliases returns an object that can list and get RadixDNSAliases.
func (s *radixDNSAliasLister) RadixDNSAliases(namespace string) RadixDNSAliasNamespaceLister {
	return radixDNSAliasNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RadixDNSAliasNamespaceLister helps list and get RadixDNSAliases.
// All objects returned here must be treated as read-only.
type RadixDNSAliasNamespaceLister interface {
	// List lists all RadixDNSAliases in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RadixDNSAlias, err error)
	// Get retrieves the RadixDNSAlias from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RadixDNSAlias, error)
	RadixDNSAliasNamespaceListerExpansion
}

// radixDNSAliasNamespaceLister implements the RadixDNSAliasNamespaceLister
// interface.
type radixDNSAliasNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RadixDNSAliases in the indexer for a given namespace.
func (s radixDNSAliasNamespaceLister) List(selector labels.Selector) (ret []*v1.RadixDNSAlias, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RadixDNSAlias))
	})
	return ret, err
}

// Get retrieves the RadixDNSAlias from the indexer for a given namespace and name.
func (s radixDNSAliasNamespaceLister) Get(name string) (*v1.RadixDNSAlias, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("radixdnsalias"), name)
	}
	return obj.(*v1.RadixDNSAlias), nil
}
