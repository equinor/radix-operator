/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "./pkg/apis/radix/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RadixBatchLister helps list RadixBatches.
// All objects returned here must be treated as read-only.
type RadixBatchLister interface {
	// List lists all RadixBatches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RadixBatch, err error)
	// RadixBatches returns an object that can list and get RadixBatches.
	RadixBatches(namespace string) RadixBatchNamespaceLister
	RadixBatchListerExpansion
}

// radixBatchLister implements the RadixBatchLister interface.
type radixBatchLister struct {
	indexer cache.Indexer
}

// NewRadixBatchLister returns a new RadixBatchLister.
func NewRadixBatchLister(indexer cache.Indexer) RadixBatchLister {
	return &radixBatchLister{indexer: indexer}
}

// List lists all RadixBatches in the indexer.
func (s *radixBatchLister) List(selector labels.Selector) (ret []*v1.RadixBatch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RadixBatch))
	})
	return ret, err
}

// RadixBatches returns an object that can list and get RadixBatches.
func (s *radixBatchLister) RadixBatches(namespace string) RadixBatchNamespaceLister {
	return radixBatchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RadixBatchNamespaceLister helps list and get RadixBatches.
// All objects returned here must be treated as read-only.
type RadixBatchNamespaceLister interface {
	// List lists all RadixBatches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RadixBatch, err error)
	// Get retrieves the RadixBatch from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RadixBatch, error)
	RadixBatchNamespaceListerExpansion
}

// radixBatchNamespaceLister implements the RadixBatchNamespaceLister
// interface.
type radixBatchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RadixBatches in the indexer for a given namespace.
func (s radixBatchNamespaceLister) List(selector labels.Selector) (ret []*v1.RadixBatch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RadixBatch))
	})
	return ret, err
}

// Get retrieves the RadixBatch from the indexer for a given namespace and name.
func (s radixBatchNamespaceLister) Get(name string) (*v1.RadixBatch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("radixbatch"), name)
	}
	return obj.(*v1.RadixBatch), nil
}
