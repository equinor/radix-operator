/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RadixAlertLister helps list RadixAlerts.
// All objects returned here must be treated as read-only.
type RadixAlertLister interface {
	// List lists all RadixAlerts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RadixAlert, err error)
	// RadixAlerts returns an object that can list and get RadixAlerts.
	RadixAlerts(namespace string) RadixAlertNamespaceLister
	RadixAlertListerExpansion
}

// radixAlertLister implements the RadixAlertLister interface.
type radixAlertLister struct {
	indexer cache.Indexer
}

// NewRadixAlertLister returns a new RadixAlertLister.
func NewRadixAlertLister(indexer cache.Indexer) RadixAlertLister {
	return &radixAlertLister{indexer: indexer}
}

// List lists all RadixAlerts in the indexer.
func (s *radixAlertLister) List(selector labels.Selector) (ret []*v1.RadixAlert, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RadixAlert))
	})
	return ret, err
}

// RadixAlerts returns an object that can list and get RadixAlerts.
func (s *radixAlertLister) RadixAlerts(namespace string) RadixAlertNamespaceLister {
	return radixAlertNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RadixAlertNamespaceLister helps list and get RadixAlerts.
// All objects returned here must be treated as read-only.
type RadixAlertNamespaceLister interface {
	// List lists all RadixAlerts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.RadixAlert, err error)
	// Get retrieves the RadixAlert from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.RadixAlert, error)
	RadixAlertNamespaceListerExpansion
}

// radixAlertNamespaceLister implements the RadixAlertNamespaceLister
// interface.
type radixAlertNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RadixAlerts in the indexer for a given namespace.
func (s radixAlertNamespaceLister) List(selector labels.Selector) (ret []*v1.RadixAlert, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.RadixAlert))
	})
	return ret, err
}

// Get retrieves the RadixAlert from the indexer for a given namespace and name.
func (s radixAlertNamespaceLister) Get(name string) (*v1.RadixAlert, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("radixalert"), name)
	}
	return obj.(*v1.RadixAlert), nil
}
