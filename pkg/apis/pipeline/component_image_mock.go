// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/apis/pipeline/component_image.go

// Package pipeline is a generated GoMock package.
package pipeline

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBuildComponentImage is a mock of BuildComponentImage interface.
type MockBuildComponentImage struct {
	ctrl     *gomock.Controller
	recorder *MockBuildComponentImageMockRecorder
}

// MockBuildComponentImageMockRecorder is the mock recorder for MockBuildComponentImage.
type MockBuildComponentImageMockRecorder struct {
	mock *MockBuildComponentImage
}

// NewMockBuildComponentImage creates a new mock instance.
func NewMockBuildComponentImage(ctrl *gomock.Controller) *MockBuildComponentImage {
	mock := &MockBuildComponentImage{ctrl: ctrl}
	mock.recorder = &MockBuildComponentImageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildComponentImage) EXPECT() *MockBuildComponentImageMockRecorder {
	return m.recorder
}

// GetComponentName mocks base method.
func (m *MockBuildComponentImage) GetComponentName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetComponentName indicates an expected call of GetComponentName.
func (mr *MockBuildComponentImageMockRecorder) GetComponentName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentName", reflect.TypeOf((*MockBuildComponentImage)(nil).GetComponentName))
}

// GetContainerName mocks base method.
func (m *MockBuildComponentImage) GetContainerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContainerName indicates an expected call of GetContainerName.
func (mr *MockBuildComponentImageMockRecorder) GetContainerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerName", reflect.TypeOf((*MockBuildComponentImage)(nil).GetContainerName))
}

// GetContext mocks base method.
func (m *MockBuildComponentImage) GetContext() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockBuildComponentImageMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockBuildComponentImage)(nil).GetContext))
}

// GetDockerfile mocks base method.
func (m *MockBuildComponentImage) GetDockerfile() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerfile")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDockerfile indicates an expected call of GetDockerfile.
func (mr *MockBuildComponentImageMockRecorder) GetDockerfile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerfile", reflect.TypeOf((*MockBuildComponentImage)(nil).GetDockerfile))
}

// GetEnvName mocks base method.
func (m *MockBuildComponentImage) GetEnvName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEnvName indicates an expected call of GetEnvName.
func (mr *MockBuildComponentImageMockRecorder) GetEnvName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvName", reflect.TypeOf((*MockBuildComponentImage)(nil).GetEnvName))
}

// GetImageName mocks base method.
func (m *MockBuildComponentImage) GetImageName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetImageName indicates an expected call of GetImageName.
func (mr *MockBuildComponentImageMockRecorder) GetImageName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageName", reflect.TypeOf((*MockBuildComponentImage)(nil).GetImageName))
}

// GetImagePath mocks base method.
func (m *MockBuildComponentImage) GetImagePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetImagePath indicates an expected call of GetImagePath.
func (mr *MockBuildComponentImageMockRecorder) GetImagePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagePath", reflect.TypeOf((*MockBuildComponentImage)(nil).GetImagePath))
}
