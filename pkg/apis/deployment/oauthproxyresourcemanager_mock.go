// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/apis/deployment/oauthproxyresourcemanager.go

// Package deployment is a generated GoMock package.
package deployment

import (
	reflect "reflect"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockOAuthProxyResourceManager is a mock of OAuthProxyResourceManager interface.
type MockOAuthProxyResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProxyResourceManagerMockRecorder
}

// MockOAuthProxyResourceManagerMockRecorder is the mock recorder for MockOAuthProxyResourceManager.
type MockOAuthProxyResourceManagerMockRecorder struct {
	mock *MockOAuthProxyResourceManager
}

// NewMockOAuthProxyResourceManager creates a new mock instance.
func NewMockOAuthProxyResourceManager(ctrl *gomock.Controller) *MockOAuthProxyResourceManager {
	mock := &MockOAuthProxyResourceManager{ctrl: ctrl}
	mock.recorder = &MockOAuthProxyResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProxyResourceManager) EXPECT() *MockOAuthProxyResourceManagerMockRecorder {
	return m.recorder
}

// GetAnnotationsForRootIngress mocks base method.
func (m *MockOAuthProxyResourceManager) GetAnnotationsForRootIngress(component v1.RadixCommonDeployComponent) map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationsForRootIngress", component)
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetAnnotationsForRootIngress indicates an expected call of GetAnnotationsForRootIngress.
func (mr *MockOAuthProxyResourceManagerMockRecorder) GetAnnotationsForRootIngress(component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationsForRootIngress", reflect.TypeOf((*MockOAuthProxyResourceManager)(nil).GetAnnotationsForRootIngress), component)
}

// Sync mocks base method.
func (m *MockOAuthProxyResourceManager) Sync(component v1.RadixCommonDeployComponent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", component)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockOAuthProxyResourceManagerMockRecorder) Sync(component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockOAuthProxyResourceManager)(nil).Sync), component)
}
