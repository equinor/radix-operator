// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/apis/deployment/oauthproxyresourcemanager.go

// Package deployment is a generated GoMock package.
package deployment

import (
	reflect "reflect"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockOAuthProxyResourceManager is a mock of OAuthProxyResourceManager interface.
type MockOAuthProxyResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthProxyResourceManagerMockRecorder
}

// MockOAuthProxyResourceManagerMockRecorder is the mock recorder for MockOAuthProxyResourceManager.
type MockOAuthProxyResourceManagerMockRecorder struct {
	mock *MockOAuthProxyResourceManager
}

// NewMockOAuthProxyResourceManager creates a new mock instance.
func NewMockOAuthProxyResourceManager(ctrl *gomock.Controller) *MockOAuthProxyResourceManager {
	mock := &MockOAuthProxyResourceManager{ctrl: ctrl}
	mock.recorder = &MockOAuthProxyResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuthProxyResourceManager) EXPECT() *MockOAuthProxyResourceManagerMockRecorder {
	return m.recorder
}

// Install mocks base method.
func (m *MockOAuthProxyResourceManager) Install(component v1.RadixCommonDeployComponent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Install", component)
	ret0, _ := ret[0].(error)
	return ret0
}

// Install indicates an expected call of Install.
func (mr *MockOAuthProxyResourceManagerMockRecorder) Install(component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Install", reflect.TypeOf((*MockOAuthProxyResourceManager)(nil).Install), component)
}

// Uninstall mocks base method.
func (m *MockOAuthProxyResourceManager) Uninstall(componentName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uninstall", componentName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Uninstall indicates an expected call of Uninstall.
func (mr *MockOAuthProxyResourceManagerMockRecorder) Uninstall(componentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uninstall", reflect.TypeOf((*MockOAuthProxyResourceManager)(nil).Uninstall), componentName)
}
