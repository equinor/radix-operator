// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/apis/deployment/oauthproxyresourcemanager.go

// Package deployment is a generated GoMock package.
package deployment

import (
	reflect "reflect"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockAuxComponentResourceManager is a mock of AuxComponentResourceManager interface.
type MockAuxComponentResourceManager struct {
	ctrl     *gomock.Controller
	recorder *MockAuxComponentResourceManagerMockRecorder
}

// MockAuxComponentResourceManagerMockRecorder is the mock recorder for MockAuxComponentResourceManager.
type MockAuxComponentResourceManagerMockRecorder struct {
	mock *MockAuxComponentResourceManager
}

// NewMockAuxComponentResourceManager creates a new mock instance.
func NewMockAuxComponentResourceManager(ctrl *gomock.Controller) *MockAuxComponentResourceManager {
	mock := &MockAuxComponentResourceManager{ctrl: ctrl}
	mock.recorder = &MockAuxComponentResourceManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuxComponentResourceManager) EXPECT() *MockAuxComponentResourceManagerMockRecorder {
	return m.recorder
}

// GarbageCollect mocks base method.
func (m *MockAuxComponentResourceManager) GarbageCollect() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GarbageCollect")
	ret0, _ := ret[0].(error)
	return ret0
}

// GarbageCollect indicates an expected call of GarbageCollect.
func (mr *MockAuxComponentResourceManagerMockRecorder) GarbageCollect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarbageCollect", reflect.TypeOf((*MockAuxComponentResourceManager)(nil).GarbageCollect))
}

// Sync mocks base method.
func (m *MockAuxComponentResourceManager) Sync(component v1.RadixCommonDeployComponent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", component)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockAuxComponentResourceManagerMockRecorder) Sync(component interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockAuxComponentResourceManager)(nil).Sync), component)
}
