// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/apis/defaults/oauth2.go

// Package defaults is a generated GoMock package.
package defaults

import (
	reflect "reflect"

	v1 "github.com/equinor/radix-operator/pkg/apis/radix/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockOAuth2DefaultConfigApplier is a mock of OAuth2DefaultConfigApplier interface.
type MockOAuth2DefaultConfigApplier struct {
	ctrl     *gomock.Controller
	recorder *MockOAuth2DefaultConfigApplierMockRecorder
}

// MockOAuth2DefaultConfigApplierMockRecorder is the mock recorder for MockOAuth2DefaultConfigApplier.
type MockOAuth2DefaultConfigApplierMockRecorder struct {
	mock *MockOAuth2DefaultConfigApplier
}

// NewMockOAuth2DefaultConfigApplier creates a new mock instance.
func NewMockOAuth2DefaultConfigApplier(ctrl *gomock.Controller) *MockOAuth2DefaultConfigApplier {
	mock := &MockOAuth2DefaultConfigApplier{ctrl: ctrl}
	mock.recorder = &MockOAuth2DefaultConfigApplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOAuth2DefaultConfigApplier) EXPECT() *MockOAuth2DefaultConfigApplierMockRecorder {
	return m.recorder
}

// ApplyTo mocks base method.
func (m *MockOAuth2DefaultConfigApplier) ApplyTo(source *v1.OAuth2) (*v1.OAuth2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyTo", source)
	ret0, _ := ret[0].(*v1.OAuth2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyTo indicates an expected call of ApplyTo.
func (mr *MockOAuth2DefaultConfigApplierMockRecorder) ApplyTo(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyTo", reflect.TypeOf((*MockOAuth2DefaultConfigApplier)(nil).ApplyTo), source)
}
